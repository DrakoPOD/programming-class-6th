import{_ as s,c as n,o as a,a as e}from"./app.23ddbb1a.js";const l="/programming-class-6th/assets/03-loop.1dbf120c.svg",b=JSON.parse('{"title":"Bucles","description":"","frontmatter":{},"headers":[{"level":2,"title":"Bucle while","slug":"bucle-while","link":"#bucle-while","children":[]},{"level":2,"title":"Bucle for","slug":"bucle-for","link":"#bucle-for","children":[]},{"level":2,"title":"Bucle do ... while","slug":"bucle-do-while","link":"#bucle-do-while","children":[]},{"level":2,"title":"sentencia break","slug":"sentencia-break","link":"#sentencia-break","children":[]},{"level":2,"title":"Sentencia next","slug":"sentencia-next","link":"#sentencia-next","children":[]},{"level":2,"title":"\xBFCu\xE1l bucle utilizar?","slug":"\xBFcual-bucle-utilizar","link":"#\xBFcual-bucle-utilizar","children":[]}],"relativePath":"basics/03-loop.md"}'),o={name:"basics/03-loop.md"},p=e('<h1 id="bucles" tabindex="-1">Bucles <a class="header-anchor" href="#bucles" aria-hidden="true">#</a></h1><p>Un bucle es una secuencia de c\xF3digo que se repiten mientras una condici\xF3n sea verdadera. Una forma de verlo gr\xE1ficamente ser\xEDa con un diagrama de flujo.</p><div style="display:flex;justify-content:center;"><p><img src="'+l+`" alt="Loop"></p></div><p>Mientras la condici\xF3n contin\xFAe dando como resultado <code>S\xED</code> es decir verdadero, siempre se ejecutar\xE1 el proceso. Cuando la condici\xF3n deje de cumplirse entonces finalizar\xE1 el proceso. Esto se conoce como <code>iteraci\xF3n</code>, que es repetir un proceso hasta alcanzar un objetivo o condici\xF3n.</p><p>Existen varios tipos de bucles, estos son: bucle <code>for</code>, <code>while</code>, <code>do while</code>.</p><h2 id="bucle-while" tabindex="-1">Bucle <code>while</code> <a class="header-anchor" href="#bucle-while" aria-hidden="true">#</a></h2><p>El bucle <code>while</code> (mientras), como su nombre indica, mientras se cumpla la condici\xF3n ejecutar\xE1 la secci\xF3n de c\xF3digo.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (condici\xF3n) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// c\xF3digo que se ejecutar\xE1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ejemplo: Un programa que verifique si la contrase\xF1a es correcta, que se mantenga preguntado mientras no se ingrese la contrase\xF1a correcta.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> correct </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (correct </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pass</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getPass</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">pass</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">SECRET_KEY</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Contrase\xF1a correcta</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">correct</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Contrase\xF1a incorrecta</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="bucle-for" tabindex="-1">Bucle <code>for</code> <a class="header-anchor" href="#bucle-for" aria-hidden="true">#</a></h2><p>Este bucle se basa en el incremento/decremento de una variable y ejecutar\xE1 una secci\xF3n de c\xF3digo hasta que este alcance la condici\xF3n. Este bucle tiene 3 par\xE1metros, el primero es la declaraci\xF3n de la variable que va a contar, el segundo es la condici\xF3n, y el tercero es el incremento.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (variable</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> condici\xF3n</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> incremento)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// C\xF3digo a ejecutar</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ejemplo: Un programa que ejecute una cuenta desde 1 hasta 5.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Para entender este c\xF3digo lo analizaremos por partes:</p><ul><li><code>var i = 1</code> se inicia la variable, se inicia en uno porque el problema plantea que de la cuenta inicie en 1.</li><li><code>i &lt;= 5</code> se establece la condici\xF3n, es decir, hasta cuanto se va a ejecutar, mientras <code>i</code> sea menor o igual a <code>5</code>, se va a ejecutar la secci\xF3n.</li><li><code>i++</code> este es el incremento, aqu\xED estamos incrementado a <code>i</code> en 1, dado que el problema plantea un incremento simple, es decir, de uno en uno. Este incremento se ejecuta autom\xE1ticamente al final de la secci\xF3n dee c\xF3digo.</li><li><code>console.log(i)</code> aqu\xED imprimimos el valor de <code>i</code> por la consola, para ver el conteo.</li></ul><p>Podemos tomar ejemplo anterior y en vez de un conteo incremental, hacer una cuenta regresiva de <code>10</code> a <code>0</code>.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="bucle-do-while" tabindex="-1">Bucle <code>do ... while</code> <a class="header-anchor" href="#bucle-do-while" aria-hidden="true">#</a></h2><p>La sentencia <code>do while</code> es muy similar a la sentencia <code>while</code>, con la diferencia que el <code>do while</code> primero ejecuta la funci\xF3n y luego verifica la condici\xF3n.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// C\xF3digo a ejecutar</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (condici\xF3n)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>La sentencia <code>do while</code> ejecuta el c\xF3digo al menos una vez sin importar si la condici\xF3n iniciar es falsa.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Me he ejecutado</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="sentencia-break" tabindex="-1">sentencia <code>break</code> <a class="header-anchor" href="#sentencia-break" aria-hidden="true">#</a></h2><p>La sentencia <code>break</code> tambi\xE9n se usa cuando se quiere interrumpir un bucle, si se usa dentro de un bucle el programa saldr\xE1 del bucle inmediatamente, independientemente de si la condici\xF3n es falsa, tampoco va a terminar la secci\xF3n de c\xF3digo.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">while</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Me ejecuto solo una vez</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">break</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Nunca me ejecutar\xE9</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="sentencia-next" tabindex="-1">Sentencia <code>next</code> <a class="header-anchor" href="#sentencia-next" aria-hidden="true">#</a></h2><p>La sentencia <code>next</code>, interrumpe la ejecuci\xF3n de la secci\xF3n de c\xF3digo para iniciar la siguiente iteraci\xF3n de del bucle.</p><p>Ejemplo un c\xF3digo diga los n\xFAmeros pares del 1 al 100, pero si es m\xFAltiplo de 5 no haga nada.</p><div class="language-js line-numbers-mode"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> ) </span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">- par</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">- impar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="\xBFcual-bucle-utilizar" tabindex="-1">\xBFCu\xE1l bucle utilizar? <a class="header-anchor" href="#\xBFcual-bucle-utilizar" aria-hidden="true">#</a></h2><p>En esencia, los bucles son iguales, la \xFAnica cosa que cambia es la forma en que manejan las condiciones.</p><p>Generalmente los programadores evitan el uso del <code>while</code> debido a que, si no se tiene cuidado, puede llevar a loops infinitos, se suele usar el bucle <code>for</code> dado a que se puede establecer su n\xFAmero de iteraciones, adem\xE1s es mucho m\xE1s f\xE1cil iterar los <strong>Arreglos/Array</strong> con el bucle for.</p><p>La mayor\xEDa de los programadores saben lo que est\xE1n escribiendo, por tanto suelen ya conocer el n\xFAmero de iteraciones que necesitan si van a hacer uso de un bucle.</p><p>En otras palabras, usar <code>while</code> cuando no sabes el n\xFAmero de interacciones que tendr\xEDa el bucle. Mientras que <code>for</code> es cuando vas a iterar un n\xFAmero conocida de veces.</p>`,36),c=[p];function r(t,i,d,F,u,y){return a(),n("div",null,c)}const m=s(o,[["render",r]]);export{b as __pageData,m as default};
